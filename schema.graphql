# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthUser {
  token: String!
  user: User!
}

type Category {
  createdAt: DateTimeISO
  id: ID!
  name: String!
  status: String!
  updatedAt: DateTimeISO
  user: User
}

input CategoryInput {
  id: ID
  name: String
  status: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type LogoutUser {
  user: String
}

type Mutation {
  addCategory(categoryId: ID!, projectId: ID!): Project!
  addTags(tagIds: [ID!]!, taskId: ID!): Task!
  createCategory(name: String!, status: String!): Category!
  createProject(description: String, name: String!): Project!
  createTag(input: TagInput!): Tag!
  createTask(input: TaskInput!): Task!
  createUser(email: String!, password: String!, username: String!): AuthUser!
  deleteCategory(id: ID!): Boolean!
  deleteProject(id: ID!): Boolean!
  deleteTag(id: ID!): Boolean!
  deleteTask(id: ID!): Task!
  login(email: String!, password: String!): AuthUser!
  removeCategory(categoryId: ID!, projectId: ID!): Project!
  updateCategory(input: CategoryInput!): Category!
  updateProject(input: ProjectInput!): Project!
  updateTag(input: TagInput!): Tag!
  updateTask(input: TaskInput!): Task!
  updateUser(input: UpdateUserInput!): User!
}

type Project {
  categories: [Category!]!
  createdAt: DateTimeISO!
  description: String
  dueDate: DateTimeISO
  id: ID!
  name: String!
  updatedAt: DateTimeISO!
  user: User!
}

input ProjectInput {
  description: String
  dueDate: DateTimeISO
  id: ID!
  name: String!
}

type Query {
  categories: [Category!]!
  category(id: ID!): Category!
  getUserByEmail(email: String!): User!
  logout: LogoutUser
  me: User
  project(id: ID!): Project!
  projects: [Project!]!
  tag(id: ID!): Tag!
  tags: [Tag!]!
  task(id: ID!): Task!
  tasks(projectId: ID!): [Task!]!
}

type Tag {
  color: String!
  createdAt: DateTimeISO!
  id: ID!
  name: String!
  updatedAt: DateTimeISO!
  user: User
}

input TagInput {
  color: String!
  id: ID
  name: String!
}

type Task {
  assignee: String
  createdAt: DateTimeISO!
  description: String
  endDate: DateTimeISO
  id: ID!
  project: Project
  startDate: DateTimeISO
  status: String!
  tags: [Tag!]!
  title: String!
  updatedAt: DateTimeISO!
  user: User!
}

input TaskInput {
  assignee: String
  description: String
  endDate: DateTimeISO
  id: ID
  projectId: ID!
  startDate: DateTimeISO
  status: String = "Open"
  tagIds: [ID!]
  title: String
}

input UpdateUserInput {
  avatar: String
  company: String
  email: String!
  firstname: String
  lastname: String
  position: String
  username: String!
}

type User {
  avatar: String
  company: String
  createdAt: DateTimeISO
  email: String!
  firstname: String
  fullname: String
  id: ID!
  lastname: String
  password: String
  position: String
  updatedAt: DateTimeISO
  username: String!
}